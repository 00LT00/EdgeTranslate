!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"a",function(){return o});const r="https://translate.google.cn/translate_a/single?client=gtx";function a(e,t){chrome.storage.sync.get("languageSetting",function(n){var a=n.languageSetting,o=r+"&sl="+a.sl+"&tl="+a.tl;chrome.storage.sync.get("DTSetting",function(n){var r=o,a=n.DTSetting,s=new XMLHttpRequest;a.forEach(e=>{r=r+"&dt="+e}),s.open("GET",r+"&q="+e,!0),s.send(),s.onreadystatechange=function(){4===s.readyState&&200===s.status?t(function(e){for(var t=new Object,n=0;n<e.length;n++)if(e[n]){var r=e[n];switch(n){case 0:var a=[],o=[];r.forEach(e=>{a.push(e[0]),o.push(e[1])}),t.mainMeaning=a.join(""),t.originalText=o.join("");break;case 1:t.detailedMeanings=new Array,r.forEach(e=>t.detailedMeanings.push({type:e[0],meaning:e[1].join(", ")}));break;case 5:if(r.length<=1){let e=new Array;r[0][2].forEach(t=>e.push(t[0])),t.commonMeanings=e.join(", ")}break;case 11:t.synonyms=new Array,r.forEach(e=>{let n=new Object;n.type=e[0],n.words=new Array,e[1].forEach(e=>n.words.push(e[0].join(", "))),t.synonyms.push(n)});break;case 12:t.definitions=new Array,r.forEach(e=>{let n=new Object;n.type=e[0],n.meanings=new Array,e[1].forEach(e=>n.meanings.push({meaning:e[0],example:e[2]})),t.definitions.push(n)});break;case 13:t.examples=new Array,r.forEach(e=>e.forEach(e=>t.examples.push(e[0])));break;case 14:t.phrases=r[0]}}return t}(JSON.parse(s.response))):200!==s.status&&alert("无法请求翻译，请检查网络连接")}})})}function o(e,t){chrome.tabs.query({active:!0,currentWindow:!0},function(n){chrome.runtime.lastError?alert(e.mainMeaning):chrome.tabs.executeScript(n[0].id,{file:"./display/display.js"},function(r){chrome.runtime.lastError?chrome.extension.isAllowedFileSchemeAccess(function(t){if(t)alert(e.mainMeaning);else if(confirm(chrome.i18n.getMessage("PermissionRemind"))){let e="chrome://extensions/?id="+chrome.runtime.id;chrome.tabs.create({url:e,index:n[0].index})}else alert(e.mainMeaning)}):e&&(chrome.tabs.sendMessage(n[0].id,e),t&&t())})})}},,function(e,t,n){"use strict";n.r(t);var r=n(0);const a={sl:"auto",tl:"zh-CN"},o=["t","at","bd","ex","md","rw","ss"],s={SelectTranslate:!0};chrome.runtime.onInstalled.addListener(function(){chrome.contextMenus.create({id:"translate",title:chrome.i18n.getMessage("Translate")+" '%s'",contexts:["selection"]}),chrome.storage.sync.get("languageSetting",function(e){e.languageSetting||chrome.storage.sync.set({languageSetting:a})}),chrome.storage.sync.get("DTSetting",function(e){e.DTSetting||chrome.storage.sync.set({DTSetting:o})}),chrome.storage.sync.get("OtherSettings",function(e){e.OtherSettings||chrome.storage.sync.set({OtherSettings:s})}),chrome.tabs.create({url:"https://github.com/nickyc975/EdgeTranslate/wiki"})}),chrome.runtime.onStartup.addListener(function(){chrome.contextMenus.removeAll(),chrome.contextMenus.create({id:"translate",title:chrome.i18n.getMessage("Translate")+" '%s'",contexts:["selection"]})}),chrome.contextMenus.onClicked.addListener(function(e,t){var n=e.selectionText;Object(r.b)(n,function(e){Object(r.a)(e)})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,